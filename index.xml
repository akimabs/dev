<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Akimabs Blog</title><link>https://akimabs.dev/</link><description>Recent content on Akimabs Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 05 Mar 2024 15:22:59 +0700</lastBuildDate><atom:link href="https://akimabs.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Mobile: Boost Performance React Native Setup Playground to Wrap Native Code</title><link>https://akimabs.dev/posts/mobile-boost-performance-react-native-setup-playground-to-wrap-native-code/</link><pubDate>Tue, 05 Mar 2024 15:22:59 +0700</pubDate><guid>https://akimabs.dev/posts/mobile-boost-performance-react-native-setup-playground-to-wrap-native-code/</guid><description>
Intro # This is the first part to boost your React Native app with native performance using native screen. Let&amp;rsquo;s check this out!
Prerequisites # Make sure you have the react-native environment, Xcode, and Android Studio installed to follow this thread. And you can either create a new React Native project or work with an existing one.
Android # Jetpack Compose Installation # Add installation Jetpack Compose version at your project at android/app/build.</description></item><item><title>Mobile: Boost Performance React Native Using Bridge Native Screen</title><link>https://akimabs.dev/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</link><pubDate>Mon, 26 Feb 2024 17:55:09 +0700</pubDate><guid>https://akimabs.dev/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</guid><description>
&lt;img src="https://akimabs.dev/img/mobile-boost-performance-react-native-using-bridge-native-screen.png"/>
Intro # The topic of native code bridges is an ongoing challenge, especially when React Native&amp;rsquo;s latest documentation when this was written are still marks some features as experimental. based on this reason i do research into bridging native screens into React Native&amp;rsquo;s base code seems like a promising initiative. This could potentially serve as a pathway for developers to refactor towards pure native code, such as Java/Kotlin and Swift, without abandoning React Native side.</description></item></channel></rss>