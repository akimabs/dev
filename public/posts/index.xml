<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Akimabs Blog</title>
    
    
    
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Akimabs Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Feb 2024 17:55:09 +0700</lastBuildDate>
    
	<atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mobile: Boost Performance React Native Using Bridge Native Screen</title>
      <link>http://localhost:1313/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</link>
      <pubDate>Mon, 26 Feb 2024 17:55:09 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</guid>
      <description>
        
          
          
          
        
        
        
          Intro # The topic of native code bridges is an ongoing challenge, especially when React Native&amp;rsquo;s latest documentation when this was written are still marks some features as experimental. based on this reason i do research into bridging native screens into React Native&amp;rsquo;s base code seems like a promising initiative. This could potentially serve as a pathway for developers to refactor towards pure native code, such as Java/Kotlin and Swift, without abandoning React Native side.
          
        
        </description>
    </item>
    
  </channel>
</rss>