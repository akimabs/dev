<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Akimabs Blog</title>
    
    
    
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Akimabs Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Mar 2024 12:29:33 +0700</lastBuildDate>
    
	<atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mobile Boost Performance React Native Integrate With Navigating Between Native Screen</title>
      <link>http://localhost:1313/posts/mobile-boost-performance-react-native-integrate-with-navigating-between-native-screen/</link>
      <pubDate>Thu, 14 Mar 2024 12:29:33 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/mobile-boost-performance-react-native-integrate-with-navigating-between-native-screen/</guid>
      <description>
        
          
          
          
        
        
        
          Intro # At this moment we will create native screen and navigate from react native. Let&amp;rsquo;s check this out!
Prerequisites # Have knowledge at native mobile development using swift/java kotlin are good, its you dont have experience you can still follow this walktrough and dont be insecure :D and please be remember at this project we name it with sinaureact
Android # In the previos thread we successfully do first brigde dummy function to communicate react-native with native side, and to create navigate to native screen we can create a new screen with jetpack compose with create some package at android/app/src/main/java/com/sinaureact with name statistic at inside package dashboard and add the kotlin file with name Statistic.
          
        
        </description>
    </item>
    
    <item>
      <title>Mobile: Boost Performance React Native Setup Playground to Wrap Native Code</title>
      <link>http://localhost:1313/posts/mobile-boost-performance-react-native-setup-playground-to-wrap-native-code/</link>
      <pubDate>Tue, 05 Mar 2024 15:22:59 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/mobile-boost-performance-react-native-setup-playground-to-wrap-native-code/</guid>
      <description>
        
          &lt;img src=&#34;http://localhost:1313/img/mobile-boost-performance-react-native-setup-playground-to-wrap-native-code.png&#34;/&gt;
          
        
        
        
          Intro # This is the first part to boost your React Native app with native performance using native screen. Let&amp;rsquo;s check this out!
Prerequisites # Make sure you have the react-native environment, Xcode, and Android Studio installed to follow this thread. And you can either create a new React Native project or work with an existing one. and please be remember at this project we name it with sinaureact
          
        
        </description>
    </item>
    
    <item>
      <title>Mobile: Boost Performance React Native Using Bridge Native Screen</title>
      <link>http://localhost:1313/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</link>
      <pubDate>Mon, 26 Feb 2024 17:55:09 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/mobile-boost-performance-react-native-using-bridge-native-screen/</guid>
      <description>
        
          &lt;img src=&#34;http://localhost:1313/img/mobile-boost-performance-react-native-using-bridge-native-screen.png&#34;/&gt;
          
        
        
        
          Intro # The topic of native code bridges is an ongoing challenge, especially when React Native&amp;rsquo;s latest documentation when this was written are still marks some features as experimental. based on this reason i do research into bridging native screens into React Native&amp;rsquo;s base code seems like a promising initiative. This could potentially serve as a pathway for developers to refactor towards pure native code, such as Java/Kotlin and Swift, without abandoning React Native side.
          
        
        </description>
    </item>
    
  </channel>
</rss>